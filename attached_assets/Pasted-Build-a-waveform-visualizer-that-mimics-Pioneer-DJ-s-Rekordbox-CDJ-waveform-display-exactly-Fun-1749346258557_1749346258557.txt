Build a waveform visualizer that mimics Pioneer DJ‚Äôs Rekordbox/CDJ waveform display exactly.

üîç Functional Requirements:
	‚Ä¢	The waveform must:
	1.	Scroll horizontally with a fixed center playhead marker (just like a CDJ-3000 or Rekordbox).
	2.	Use color-coded frequency bands for real-time visual reference:
	‚Ä¢	Low (bass) = yellow or white
	‚Ä¢	Mid = orange
	‚Ä¢	High (treble) = blue
	3.	Be split vertically into 3 distinct frequency rows (Low, Mid, High) OR use color blending per bar if preferred.
	4.	Show bar/beat grid overlays, perfectly aligned to BPM and time signature.
	5.	Display cue points, loop markers, and optional hot cues as vertical flags or blocks.
	6.	Include a zoomed-out mini waveform overview below the main waveform.

üì¶ Technical Requirements:
	‚Ä¢	Use FFT (Fast Fourier Transform) or Short-Time Fourier Transform (STFT) for frequency analysis.
	‚Ä¢	Slice the audio into overlapping windows (e.g. 1024 or 2048 samples, 50% overlap) and compute energy in 3 bands:
	‚Ä¢	LOW = 20‚Äì250 Hz
	‚Ä¢	MID = 250‚Äì4,000 Hz
	‚Ä¢	HIGH = 4,000‚Äì20,000 Hz
	‚Ä¢	Calculate the average RMS energy per band per slice.
	‚Ä¢	Map each frequency band‚Äôs energy to a corresponding RGB color value or waveform height.
	‚Ä¢	Render waveforms in a smooth, GPU-accelerated canvas (e.g., HTML5 Canvas, WebGL, or OpenGL).

üìÅ Optional Features:
	‚Ä¢	Preprocess audio and store waveform data in cache files (like Rekordbox‚Äôs .EXTDATA) to speed up reloading.
	‚Ä¢	Support BPM detection and beatgrid generation using algorithms like:
	‚Ä¢	Spectral Flux or Onset Detection
	‚Ä¢	Dynamic Time Warping for alignment
	‚Ä¢	Display tempo, key, and waveform zoom controls.

üé® Design/Style Guidelines:
	‚Ä¢	Dark background (black or charcoal grey).
	‚Ä¢	Crisp, neon-style color palette.
	‚Ä¢	Sharp grid lines and ticks every 1 beat and 4 beats.
	‚Ä¢	High refresh rate scrolling (ideally 60 FPS).
	‚Ä¢	Fixed white triangle marker in the center of the waveform.

üë®‚Äçüíª Stack Suggestions (optional):
	‚Ä¢	Frontend: HTML5 Canvas / WebGL / Three.js / React
	‚Ä¢	Audio Processing: Web Audio API (browser), librosa (Python), pydub, or essentia
	‚Ä¢	Languages: JavaScript (for browser), Python (for offline tools), C++ (for performance apps)

‚∏ª
